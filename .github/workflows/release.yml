name: Release

on:
  push:
    branches:
        - app/sparkle
    #   - main
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release'
        type: string

permissions:
  contents: write
  pull-requests: read
  statuses: write
  packages: write

jobs:
  release:
    name: Release Tuist App
    runs-on: macos-latest
    timeout-minutes: 30
    if: ${{ !contains(github.event.head_commit.message, '[Release]') }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        # with:
        #   fetch-depth: 0
      - uses: jdx/mise-action@v2
        with:
          experimental: true
        env: 
          MISE_HTTP_TIMEOUT: 300
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_15.3.app
      - name: Install dependencies
        run: mise run install
      - name: Bundle Tuist App
        run: mise run bundle:app
        env:
            CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
            APPLE_ID: ${{ secrets.APPLE_ID }}
            APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
            CERTIFICATE_ENCRYPTION_PASSWORD: ${{ secrets.CERTIFICATE_ENCRYPTION_PASSWORD }}
            TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_APP_CONFIG_TOKEN }}
    #   - name: Check if there are releasable changes
    #     id: is-releasable
    #     run: |
    #       # Run git cliff and save the output
    #       bumped_output=$(git cliff --bump)
    #       echo "Bumped output:"
    #       echo "${bumped_output}"
  
    #       # Read the content of CHANGELOG.md
    #       changelog_content=$(cat CHANGELOG.md)
    #       echo "CHANGELOG.md content:"
    #       echo "${changelog_content}"
  
    #       # Compare the outputs and set the result
    #       if [ "${bumped_output}" = "${changelog_content}" ]; then
    #         echo "should-release=false" >> $GITHUB_ENV
    #       else
    #         echo "should-release=true" >> $GITHUB_ENV
    #       fi
      
    #   - name: Get next version
    #     id: next-version
    #     if: env.should-release == 'true'
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     run: echo "NEXT_VERSION=$(git cliff --bumped-version)" >> "$GITHUB_OUTPUT"
    #   - name: Get release notes
    #     id: release-notes
    #     if: env.should-release == 'true'
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     run: |
    #       echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
    #       git cliff --unreleased >> "$GITHUB_OUTPUT"
    #       echo "EOF" >> "$GITHUB_OUTPUT"
    #   - name: Update CHANGELOG.md
    #     if: env.should-release == 'true'
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     run: git cliff --bump -o CHANGELOG.md
    #   - name: Commit changes
    #     id: auto-commit-action
    #     uses: stefanzweifel/git-auto-commit-action@v5
    #     if: env.should-release == 'true'
    #     with:
    #       commit_options: '--allow-empty'
    #       tagging_message: ${{ steps.next-version.outputs.NEXT_VERSION }}
    #       skip_dirty_check: true
    #       commit_message: "[Release] XcodeGraph ${{ steps.next-version.outputs.NEXT_VERSION }}"
    #   - name: Create GitHub Release
    #     uses: softprops/action-gh-release@v2
    #     if: env.should-release == 'true'
    #     with:
    #       draft: false
    #       repository: tuist/XcodeGraph
    #       name: ${{ steps.next-version.outputs.NEXT_VERSION }}
    #       tag_name: ${{ steps.next-version.outputs.NEXT_VERSION }}
    #       body: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
    #       target_commitish: ${{ steps.auto-commit-action.outputs.commit_hash }}